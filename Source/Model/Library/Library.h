//
//  Library.h
//  Pinna
//
//  Created by Peter MacWhinnie on 9/24/10.
//  Copyright 2010 Roundabout Software, LLC. All rights reserved.
//

#import <Cocoa/Cocoa.h>
#import "Song.h"

@class ExfmSession;
@class Artist, Album, Song;

///The location of the library stored as bookmark data.
///
///The default value in the user default's for this method is nothing.
RK_EXTERN NSString *const kLibraryLocationBookmarkDataUserDefaultsKey;


///The sort descriptors to use with songs.
RK_EXTERN NSArray *kSongSortDescriptors;

///The sort descriptors to use with artists.
RK_EXTERN NSArray *kArtistSortDescriptors;

///The sort descriptors to use with albums.
RK_EXTERN NSArray *kAlbumSortDescriptors;


///The placeholder string to use when an artist name is unknown.
RK_EXTERN NSString *const kArtistPlaceholderName;

///The placeholder string to use when an album name is unknown.
RK_EXTERN NSString *const kAlbumPlaceholderName;

///The placeholder string to use for compilations.
RK_EXTERN NSString *const kCompilationPlaceholderName;


///The marker string used for autogenerated compilations.
RK_EXTERN NSString *const kCompilationArtistMarker;


///Posted when a library error occurs.
RK_EXTERN NSString *const LibraryErrorDidOccurNotification;


///Returns the best possible match for a song in a specified array.
///
///This function will return `nil` if no possible match is found.
RK_EXTERN Song *BestMatchForSongInArray(Song *song, NSArray *songArray);

#pragma mark -

///Posted when the shared Library updates its data.
RK_EXTERN NSString *const LibraryDidUpdateNotification;

///Posted when the library loads.
RK_EXTERN NSString *const LibraryDidLoadNotification;

///The Library class is responsible for loading song data from multiple sources
//and coalesing it into consistent, readable data for all of Pinna.
@interface Library : NSObject
{
	ExfmSession *mExfmSession;
	NSMutableSet *mExFMSongsBeingOperatedOn;
	NSMutableSet *mExFMSongsWaitingForNotification;
	
	NSURL *mCachedLibraryLocation;
    
    ///This ivar controls our access to iTunes libraries
    ///that exist outside of our default sandbox.
	NSURL *mCustomITunesFolderWithSecurityScope;
    
	NSArray/*of Song*/ *mCachedSongs;
	NSDictionary/*of NSString -> Artist*/ *mCachedArtists;
	NSArray/*of Playlist*/ *mCachedPlaylists;
	
	NSDictionary/*of NSString -> NSString*/ *mAlternateSongSourceIdentifiers;
	NSMutableDictionary *mExternalAlternateSongSourceIdentifiers;
	
	dispatch_queue_t mCacheUpdateQueue;
	BOOL mCacheIsInvalid;
}

///Returns the shared library instance, creating it if it doesn't exist.
+ (Library *)sharedLibrary;

#pragma mark - Locations

///The location of the iTunes folder.
@property NSURL *iTunesFolderLocation;

#pragma mark - Ex.fm

///Returns the Ex.fm identifier for a specified song.
- (NSString *)exFMIdentifierForSong:(Song *)song;

///Returns whether or not a song is currently being loved or unloved.
- (BOOL)isSongBeingLovedOrUnloved:(Song *)song;

///Returns a boolean indicating whether or not a song can be loved.
- (BOOL)isSongLovable:(Song *)song;

///Returns a boolean indicating whether or not a song is loved.
- (BOOL)isSongLoved:(Song *)song;

#pragma mark -

///Returns a promise to love a specified library song.
///
///	\param	song	The song to love. Required.
///
///This method should be preferred over interacting with the `.exFMSession`
///directly, as using this method will prevent multiple love/unlove
///operations from being committed on a given song.
- (RKPromise *)loveExFMSong:(Song *)song;

///Returns a promise to unlove a specified library song.
///
///	\param	song	The song to love. Required.
///
///This method should be preferred over interacting with the `.exFMSession`
///directly, as using this method will prevent multiple love/unlove
///operations from being committed on a given song.
- (RKPromise *)unloveExFMSong:(Song *)song;

#pragma mark - Accessing Music

///All of the songs the library is currently aware of. KVC compliant.
@property (readonly) NSArray/*of Song*/ *songs;

///All of the playlists currently known to the library.
@property (readonly) NSArray/*of Playlist*/ *playlists;

#pragma mark -

///All the artists known to the library.
@property (readonly) NSArray/*of Artist*/ *artists;

///Returns a shared artist object with a specified name.
- (Artist *)artistWithName:(NSString *)name;

#pragma mark -

///All the albums known to the library.
@property (readonly) NSArray/*of Artist*/ *albums;

///Returns a shared album object with a specified name and specified artist name.
- (Album *)albumWithName:(NSString *)name forArtistNamed:(NSString *)artistName;

#pragma mark - Alternate Identifiers

- (void)registerExternalAlternateIdentifier:(NSString *)identifier forSong:(Song *)song;
- (NSString *)alternateSourceIdentifierForSong:(Song *)song;

#pragma mark - URLs

///Returns the Ex.fm URL for a specified song.
- (NSURL *)exFMURLForSong:(Song *)song;

///Returns the Pinna URL for a specified song.
- (NSURL *)pinnaURLForSong:(Song *)song;

@end
